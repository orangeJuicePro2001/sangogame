{
    "compAutoOrderLimitHeight": 0,
    "id": 3013,
    "blockList": [
        {
            "name": "修改界面内的元件属性",
            "blockAttrs": [
                {
                    "attr": {
                        "id": "49888868392_0.20897767076252083",
                        "varName": "changeUIAttr",
                        "varType": 5,
                        "compData": {
                            "compType": 42,
                            "compParam": {}
                        },
                        "defaultValue": "",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "修改界面元件",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [],
                    "y": 10,
                    "x": 15,
                    "width": 459,
                    "height": 32
                }
            ],
            "blockCondition": [],
            "blockHeight": 50,
            "autoOrder": true,
            "cmdColor": "#ffa64c",
            "hideBlockTitle": false,
            "cmdIcon": "asset/image/command/eP_icon_MobileComponentsUI_warmyellow.png"
        }
    ],
    "fastModifyAttribute": false,
    "isCustomPhraseDesc": true,
    "customPhraseDescTS": "// 根据属性名称值编写自定义短语描述，如：\"我的短语是\"+attrs.xxx\n// 使用下拉框组件的变量attrs.xxx有对应的attrs.xxxItems的属性以便获得标签名集合\n// 获取自定义模块的数据名称的函数：getModuleDataName(moduleID:number,dataID:number):string;\n// 获取各种列表内数据名称的函数：getTypeDataListName(typeID: number, dataID: number):string;\n// -- typeID ：0-全局变量 1-全局开关 2-全局字符串 3-玩家变量 4-玩家开关 5-玩家字符串\n//           ：6-场景列表 7-场景对象模型列表 8-图块列表 9-行走图列表 10-行走图动作列表 11-立绘列表 12-立绘表情列表\n//           ：13-公共事件 14-对话框列表 15-动画列表 16-动画信号列表 17-界面列表 18-数据结构列表 19-自定义模块列表\n//           ：20-自定义命令列表 21-自定义行为列表 22-自动元件列表 23-行走图部件列表 24-立绘部件列表\nvar changeUIAttrData = CustomAttributeSetting.getChangeUIAttrsData(attrs.changeUIAttr);\nvar cmd = { params: changeUIAttrData[1] };\nCommandExecute.message71(cmd as any, false);",
    "customPhraseDescJS": "var changeUIAttrData = CustomAttributeSetting.getChangeUIAttrsData(attrs.changeUIAttr);\nvar cmd = { params: changeUIAttrData[1] };\nCommandExecute.message71(cmd, false);\n",
    "cmdPreviewTS": "//------------------------------------------------------------------------------------------------------\r\n// 编辑器预览窗口运行时提供的系统变量\r\n// 关于预览的流程：\r\n// -- 1.imageLayerPassageClear 每已使用的通道x每已使用的指令\r\n// -- 2.runCommand 每个指令按顺序执行一遍\r\n// -- 3.imageLayerPassageStart 每已使用的通道x每已使用的指令\r\n// 关于播放的流程\r\n// -- 1.imageLayerPassageClear 每已使用的通道x每已使用的指令\r\n// -- 2.runCommand 每个指令按顺序播放\r\n//------------------------------------------------------------------------------------------------------\r\n/**\r\n * 当前自定义指令的编号\r\n */\r\ndeclare var commandID: number;\r\n/**\r\n * 图像层通道数据\r\n */\r\ndeclare var imageLayerPassageData: any[];\r\n/**\r\n * 图像层显示对象容器\r\n */\r\ndeclare var imageLayer: GameImageLayer;\r\n/**\r\n * 界面层显示对象容器\r\n */\r\ndeclare var uiLayer: GameSprite;\r\n/**\r\n * 预览窗口\r\n */\r\ndeclare var previewWin: {\r\n    /**\r\n     * 清理全部事件指令产生的预览效果\r\n     */\r\n    clearData: Function;\r\n    /**\r\n     * 设置数据，刷新预览效果直到当前选中的指令行\r\n     */\r\n    setData: Function;\r\n    /**\r\n     * 当前选中的指令\r\n     */\r\n    currentSelectCmd: Command;\r\n    /**\r\n     * 视图区域是否右键移动过\r\n     */\r\n    viewAreaRightMouseMove: boolean;\r\n    /**\r\n     * 界面层显示优先级计数 从0开始\r\n     */\r\n    uiLayerDisplayPriority: number;\r\n    /**\r\n     * 允许显示全部对象\r\n     */\r\n    allowAllDisplayObject: boolean;\r\n    /**\r\n     * 对象操作工具\r\n     */\r\n    operateObjectTool: {\r\n        // 刷新对象操作工具，比如来自其他地方更改了对象的位置或尺寸等，可使用该函数刷新\r\n        refresh: Function,\r\n        // 选中显示对象\r\n        selectObjects: (sp: GameSprite[]) => void,\r\n        // 需要排除缩放和旋转工具的对象\r\n        addExcludeOperactionObject: (sp: GameSprite) => void\r\n    }\r\n    /**\r\n     * 选中事件指令\r\n     * @param cmd 事件指令\r\n     * @param sendEvent 派发事件 默认=false 派发事件会刷新属性栏、预览窗口等\r\n     */\r\n    selectCmdMessageByCmd(cmd: Command, sendEvent?: boolean);\r\n    /**\r\n     * 修改指令属性\r\n     * @param cmd 需要修改的指令\r\n     * @param varName 参数变量名称\r\n     * @param newValue 新的值\r\n     */\r\n    modifyCommandParam: (cmd: Command, varName: string, newValue: any) => void;\r\n    /**\r\n     * 新增指令 默认是默认值，如果有写入参数的话则以参数为准 varNameValue\r\n     * @param customID 自定义ID\r\n     * @param varNameValue 额外的变量值，如存在则优先使用该值，否则使用自定义编辑器中的默认值，如 {dpX:100,dpY:200}\r\n     * @param selectedIndex [可选] 默认值=-2  -3=当前选中（之后） -2=当前选中（之前） -1=最尾端 0-N=自定义 \r\n     * @param refreshPreViewArea [可选] 默认值=true 刷新预览区\r\n     */\r\n    insertCustomCMD(customID: number, varNameValue: any, selectedIndex?: number, refreshPreViewArea?: boolean): Command;\r\n    /**\r\n     * 更改显示层\r\n     * @param selectedIndex 0-界面层 1-图像层\r\n     */\r\n    changeLayer(selectedIndex: number): void;\r\n    /**\r\n     * 创建菜单\r\n     * var menuData:any[] = [\r\n               {\r\n                   label:\"重命名\",\r\n                   splitLine:false,// 是否显示分割线\r\n                   children:[], // 存放和本身这个对象是一样的格式\r\n                   execute:\"functionName\", // 点击后执行的方法名称\r\n                   shortcutKey:\"\", //显示的快捷键名称\r\n                   menuHotKey:\"\", //实际作用的快捷键名称 对应Laya.KeyBoard的值 如A\r\n                   enabled:true, // 是否可用，不填写表示true\r\n                   visible:true, // 是否显示，不填写表示true\r\n\t\t\t\t   selected:true, // 如果存在则以打钩的形式选择此项\r\n\t\t\t\t   group:\"myGroupName\" // 配合selected，如若存在则同组单选\r\n               }\r\n           ];\r\n     * @param menuData 菜单数据\r\n     * @param x 全局坐标X\r\n     * @param y 全局坐标Y\r\n     * @param executeDomain 函数作用域\r\n     */\r\n    createMenu(menuData: any[], x: number, y: number, executeDomain: any);\r\n}\r\n//------------------------------------------------------------------------------------------------------\r\n// \r\n//------------------------------------------------------------------------------------------------------\r\ndeclare class UIPassageData {\r\n    // ====> system 必要项\r\n    /**\r\n     * 通道编号\r\n     */\r\n    passageID: number;\r\n    /**\r\n     * 类别，一般用于区分显示对象，如图片、动画、立绘、界面都是属于不同的类别\r\n     */\r\n    type: string;\r\n    /**\r\n     * 记录关联的指令\r\n     */\r\n    cmd: Command;\r\n    /**\r\n     * 当通道覆盖时调用的函数，以便清理掉。如显示了2号图片或移动了2号图片，再次显示2号图片时会清理掉此前显示的图片或移动行为\r\n     */\r\n    onCoverPassage: Function;\r\n\r\n    // ====> custom 自定义属性\r\n    onChangeAttrFrame: Function[];\r\n    changeUIAttrMode: boolean;\r\n    changeUIAttrs: any[];\r\n    dpDisplayPriority: number; // 显示层次优先级\r\n    passageIDUseVar: boolean;\r\n    uiID: number;\r\n    displayObject: GUI_BASE;\r\n    displayObjectFromShow: boolean; // 区分显示对象来源，是否来自显示图片，否则来自移动图片\r\n    dpX: number;\r\n    dpY: number;\r\n    dpZ: number;\r\n    dpScaleX: number;\r\n    dpScaleY: number;\r\n    rotation: number;\r\n    opacity: number;\r\n\r\n    showType: number;\r\n    objectUseVar: boolean;\r\n    refObjectEnabled: boolean;\r\n    refObject: number;\r\n    lastStandAvatarCmdParams: ThisCommandParams; // 记录上一个关联的指令的参数\r\n}\r\nvar passageType = \"gcUI\";\r\n//------------------------------------------------------------------------------------------------------\r\n// [everyone used command] 逐指令行目执行\r\n//------------------------------------------------------------------------------------------------------\r\n/**\r\n * 逐指令执行：对应事件下按照从上至下的顺序逐行执行，如果是该自定义指令时则会执行该函数\r\n * 该函数用于编辑器预览和播放，如果分歧面板中筛选不经过的事件指令则不会执行该函数。\r\n * 比如事件页中有3个该指令，则按照顺序执行3次该函数\r\n * @param cmdParams 指令的自定义参数数据，根据用户设定值\r\n * @param cmd 对应的指令对象\r\n * @param isPlayMode 是否是播放模式，否则是普通的预览模式\r\n */\r\nfunction runCommand(cmdParams: ThisCommandParams, cmd: Command, isPlayMode: boolean) {\r\n    // -- 图像层的场合\r\n    var params = cmdParams.changeUIAttr[1];\r\n    var uiID = MathUtils.int(params[2].uiID);\r\n    if (uiID <= 0) return;\r\n    var passageID = 1000000 + uiID;\r\n    // -- 获取通道数据\r\n    var passageData: UIPassageData = imageLayerPassageData[passageID];\r\n    // 播放模式：\r\n    if (isPlayMode) {\r\n        if (!passageData) return;\r\n        var cmdParam = cmdParams.changeUIAttr[1];\r\n        // 立即模式：无需清理此行为\r\n        if (cmdParam[5] == 0) {\r\n            var atts: { uiID: number, atts: { [compID: string]: [number, { [attrName: string]: any }] } } = cmdParam[2];\r\n            if (atts) {\r\n                var comps = GameUI.getAllCompChildren(passageData.displayObject, true);\r\n                for (var compID in atts.atts) {\r\n                    var uiComp = comps.keyValue[compID];\r\n                    if (uiComp) {\r\n                        var attsValues = atts.atts[compID][1];\r\n                        for (var attName in attsValues) {\r\n                            var attValue = attsValues[attName];\r\n                            uiComp[attName] = attValue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var m = {\r\n                time: cmdParam[0],\r\n                curTime: 1,\r\n                transData: GameUtils.getTransData(cmdParam[1]),\r\n                attrInfos: []\r\n            }\r\n            var atts: { uiID: number, atts: { [compID: string]: [number, { [attrName: string]: any }] } } = cmdParam[2];\r\n            if (atts) {\r\n                var comps = GameUI.getAllCompChildren(passageData.displayObject, true);\r\n                for (var compID in atts.atts) {\r\n                    var uiComp = comps.keyValue[compID];\r\n                    if (uiComp) {\r\n                        var attsValues = atts.atts[compID][1];\r\n                        var useVarAndTransitionAttrs = atts.atts[compID][2];\r\n                        for (var attName in attsValues) {\r\n                            var oldValue = uiComp[attName];\r\n                            var needTween = typeof oldValue == \"number\";\r\n                            var useVarAndTransition: { index: number, change: boolean, type: number } = useVarAndTransitionAttrs[attName];\r\n                            if (useVarAndTransition) {\r\n                                // 如果并非过渡渐变的话则表示立即变更，效果会受到「无法渐变的属性处理」影响\r\n                                if (!useVarAndTransition.change) {\r\n                                    needTween = false;\r\n                                }\r\n                            }\r\n                            var newValue = attsValues[attName];\r\n                            var attrInfo = { uiComp: uiComp, attName: attName, oldValue: oldValue, needTween: needTween, newValue: newValue };\r\n                            m.attrInfos.push(attrInfo);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!passageData.onChangeAttrFrame) passageData.onChangeAttrFrame = [];\r\n            var f: Function;\r\n            os.add_ENTERFRAME(f = (displayObject: UIStandAvatar, cmdParams: ThisCommandParams, cmdParam: any) => {\r\n                var nonTweenType = cmdParam[3];\r\n                var per = m.curTime / m.time;\r\n                for (var i = 0; i < m.attrInfos.length; i++) {\r\n                    var attrInfo = m.attrInfos[i];\r\n                    if (!attrInfo.needTween) {\r\n                        // 无法渐变过渡的属性处理方式：在第一帧时变动/在最后一帧变动\r\n                        if ((nonTweenType == 0 && m.curTime == 1) || (nonTweenType == 1 && per == 1)) {\r\n                            attrInfo.uiComp[attrInfo.attName] = attrInfo.newValue;\r\n                        }\r\n                    }\r\n                    else {\r\n                        var valuePer = GameUtils.getValueByTransData(m.transData, per);\r\n                        attrInfo.uiComp[attrInfo.attName] = (attrInfo.newValue - attrInfo.oldValue) * valuePer + attrInfo.oldValue;\r\n                    }\r\n                }\r\n                m.curTime++;\r\n                if (per == 1) {\r\n                    os.remove_ENTERFRAME(arguments.callee, this);\r\n                }\r\n            }, this, [passageData.displayObject, cmdParams, cmdParam]);\r\n            f.apply(this, [passageData.displayObject, cmdParams, cmdParam]);\r\n            // 添加至组\r\n            passageData.onChangeAttrFrame.push(f);\r\n            // 覆盖函数\r\n            var lastOnCoverPassage = passageData.onCoverPassage;\r\n            passageData.onCoverPassage = function () {\r\n                os.remove_ENTERFRAME(f, this);\r\n                lastOnCoverPassage.apply(this, arguments);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (!passageData) {\r\n            passageData = imageLayerPassageData[passageID] = {} as any;\r\n            passageData.passageID = passageID;\r\n            passageData.type = passageType;\r\n            passageData.cmd = cmd;\r\n            passageData.lastStandAvatarCmdParams = cmdParams;\r\n            passageData.uiID = uiID;\r\n            passageData.dpX = 0;\r\n            passageData.dpY = 0;\r\n            passageData.dpZ = 100;\r\n            passageData.dpScaleX = 1;\r\n            passageData.dpScaleY = 1;\r\n            passageData.rotation = 0;\r\n            passageData.opacity = 1;\r\n            passageData.showType = 0;\r\n        }\r\n        passageData.changeUIAttrMode = true;\r\n        if (passageData.changeUIAttrs == null) passageData.changeUIAttrs = [];\r\n        passageData.changeUIAttrs.push(cmdParams.changeUIAttr);\r\n    }\r\n}\r\n//------------------------------------------------------------------------------------------------------\r\n// 属性面板修改：当修改该指令的属性时，只会执行该指令对应的「指令源」的这些函数\r\n// 如A指令来自自定义指令32号，每次通过属性面板快速修改A指令的参数b时，则会执行32号指令的下面2个函数\r\n// [current used command] \r\n//------------------------------------------------------------------------------------------------------\r\n/**\r\n * 当属性面板中的属性修改前\r\n * @param cmd 对应的指令\r\n * @param cmdParams 对应指令的参数 \r\n * @param varName 修改的属性名\r\n */\r\nfunction onCommandAttributeBeforeChange(cmd: Command, cmdParams: ThisCommandParams, varName: string) {\r\n    previewWin.clearData();\r\n}\r\n/**\r\n * 当属性面板中的属性修改后\r\n * @param cmd 对应的指令\r\n * @param cmdParams 对应指令的参数 \r\n * @param varName 修改的属性名\r\n * @param newValue 修改后的值\r\n */\r\nfunction onCommandAttributeChange(cmd: Command, cmdParams: ThisCommandParams, varName: string, newValue: any) {\r\n    previewWin.setData(false);\r\n}\r\n//------------------------------------------------------------------------------------------------------\r\n// 对象操作工具\r\n// [everyone used command type] 遍历每个执行过的自定义指令类别\r\n//------------------------------------------------------------------------------------------------------\r\n/**\r\n * 当操作工具移动对象时\r\n * @param realSelObjs 选中的对象\r\n */\r\nfunction imageLayerOnToolsChangePostion(realSelObjs: GameSprite[]): void {\r\n\r\n}\r\n/**\r\n * 当操作工具缩放时\r\n * @param realSelObjs 选中的对象\r\n */\r\nfunction imageLayerOnToolsChangeSize(realSelObjs: GameSprite[]) {\r\n\r\n}\r\n/**\r\n * 当操作工具旋转时\r\n * @param realSelObjs 选中的对象\r\n */\r\nfunction imageLayerOnToolsChangeRotation(realSelObjs: GameSprite[]) {\r\n\r\n}\r\n/**\r\n * 当操作工具开始操作时\r\n */\r\nfunction imageLayerOnToolsChangeStart(realSelObjs: GameSprite[]) {\r\n\r\n}\r\n/**\r\n * 当操作工具结束操作时\r\n */\r\nfunction imageLayerOnToolsChangeEnd(realSelObjs: GameSprite[]) {\r\n\r\n}\r\n/**\r\n * 当操作工具选中对象时\r\n */\r\nfunction imageLayerOnToolsSelectObject(realSelObjs: GameSprite[]) {\r\n\r\n}\r\n//------------------------------------------------------------------------------------------------------\r\n// 图像层相关 遍历每个已使用的通道，每个已使用的通道再遍历已使用的指令，调用下面的函数\r\n// [everyone passage] x [everyone used command type]\r\n//------------------------------------------------------------------------------------------------------\r\n/**\r\n * 清理函数：每次刷新前调用此函数进行清理\r\n * @param passageID 通道\r\n * @param passageData 通道储存的数据\r\n */\r\nfunction imageLayerPassageClear(passageID: number, passageData: UIPassageData) {\r\n    // -- 判断该通道是图片的话\r\n    if (passageData.type == passageType) {\r\n        // 清理注册的移动\r\n        if (passageData.onChangeAttrFrame) {\r\n            for (var i = 0; i < passageData.onChangeAttrFrame.length; i++) {\r\n                var f = passageData.onChangeAttrFrame[i];\r\n                os.remove_ENTERFRAME(f, this);\r\n            }\r\n        }\r\n        var a: GUI_BASE = passageData.displayObject;\r\n        // 存在且不是来自显示图片的话\r\n        if (a) {\r\n            a.dispose();\r\n        }\r\n    }\r\n}\r\n/**\r\n * 开始函数\r\n * @param passageID 通道\r\n * @param passageData 通道储存的数据\r\n */\r\nfunction imageLayerPassageStart(passageID: number, passageData: UIPassageData) {\r\n    if (passageData.type == passageType && passageData.changeUIAttrMode) {\r\n        // 当没有显示对象时创建一个（目前一定是在界面层）\r\n        if (!passageData.displayObject) {\r\n            var showUIID = passageData.uiID;\r\n            var a = GameUI.load(showUIID, true);\r\n            if (!a) {\r\n                return;\r\n            }\r\n            previewWin.operateObjectTool.addExcludeOperactionObject(a);\n        passageData.onCoverPassage = imageLayerPassageClear;// v0.985 upgrader\n\r\n            a.mouseEnabled = false;\r\n            a.data = passageData;\r\n            passageData.displayObject = a;\r\n            uiLayer.addChild(a);\r\n            // -- 同Z轴时按该优先级出现，即编号越大yue\r\n            a.width = Config.WINDOW_WIDTH;\r\n            a.height = Config.WINDOW_HEIGHT;\r\n            // -- 深度坐标\r\n            a.dpDisplayPriority = passageData.dpDisplayPriority;\r\n            a.x = passageData.dpX;\r\n            a.y = passageData.dpY;\r\n            a.scaleX = passageData.dpScaleX;\r\n            a.scaleY = passageData.dpScaleY;\r\n            a.width = Config.WINDOW_WIDTH;\r\n            a.height = Config.WINDOW_HEIGHT;\r\n            a.rotation = passageData.rotation;\r\n            a.opacity = passageData.opacity;\r\n            // -- 如果是当前指令的话则选中它\r\n            if (previewWin.currentSelectCmd == passageData.cmd) {\r\n\r\n            }\r\n            else if (!previewWin.allowAllDisplayObject) {\r\n                a.mouseEnabled = false;\r\n                a.setTonal(-200, -200, -200, 0);\r\n            }\r\n        }\r\n        else {\r\n            passageData.displayObject.mouseEnabled = previewWin.allowAllDisplayObject;\r\n            passageData.displayObject.setTonal(0, 0, 0, 0);\r\n        }\r\n        // 移动界面元件\r\n        for (var i = 0; i < passageData.changeUIAttrs.length; i++) {\r\n            var changeUIAttr = passageData.changeUIAttrs[i];\r\n            var atts: { uiID: number, atts: { [compID: string]: [number, { [attrName: string]: any }] } } = changeUIAttr[1][2];\r\n            if (atts) {\r\n                var comps = GameUI.getAllCompChildren(passageData.displayObject, true);\r\n                for (var compID in atts.atts) {\r\n                    var uiComp = comps.keyValue[compID];\r\n                    if (uiComp) {\r\n                        var attsValues = atts.atts[compID][1];\r\n                        for (var attName in attsValues) {\r\n                            var attValue = attsValues[attName];\r\n                            uiComp[attName] = attValue;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "cmdPreviewJS": "var passageType = \"gcUI\";\nfunction runCommand(cmdParams, cmd, isPlayMode) {\n    var _this = this;\n    var params = cmdParams.changeUIAttr[1];\n    var uiID = MathUtils.int(params[2].uiID);\n    if (uiID <= 0)\n        return;\n    var passageID = 1000000 + uiID;\n    var passageData = imageLayerPassageData[passageID];\n    if (isPlayMode) {\n        if (!passageData)\n            return;\n        var cmdParam = cmdParams.changeUIAttr[1];\n        if (cmdParam[5] == 0) {\n            var atts = cmdParam[2];\n            if (atts) {\n                var comps = GameUI.getAllCompChildren(passageData.displayObject, true);\n                for (var compID in atts.atts) {\n                    var uiComp = comps.keyValue[compID];\n                    if (uiComp) {\n                        var attsValues = atts.atts[compID][1];\n                        for (var attName in attsValues) {\n                            var attValue = attsValues[attName];\n                            uiComp[attName] = attValue;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            var m = {\n                time: cmdParam[0],\n                curTime: 1,\n                transData: GameUtils.getTransData(cmdParam[1]),\n                attrInfos: []\n            };\n            var atts = cmdParam[2];\n            if (atts) {\n                var comps = GameUI.getAllCompChildren(passageData.displayObject, true);\n                for (var compID in atts.atts) {\n                    var uiComp = comps.keyValue[compID];\n                    if (uiComp) {\n                        var attsValues = atts.atts[compID][1];\n                        var useVarAndTransitionAttrs = atts.atts[compID][2];\n                        for (var attName in attsValues) {\n                            var oldValue = uiComp[attName];\n                            var needTween = typeof oldValue == \"number\";\n                            var useVarAndTransition = useVarAndTransitionAttrs[attName];\n                            if (useVarAndTransition) {\n                                if (!useVarAndTransition.change) {\n                                    needTween = false;\n                                }\n                            }\n                            var newValue = attsValues[attName];\n                            var attrInfo = { uiComp: uiComp, attName: attName, oldValue: oldValue, needTween: needTween, newValue: newValue };\n                            m.attrInfos.push(attrInfo);\n                        }\n                    }\n                }\n            }\n            if (!passageData.onChangeAttrFrame)\n                passageData.onChangeAttrFrame = [];\n            var f;\n            os.add_ENTERFRAME(f = function (displayObject, cmdParams, cmdParam) {\n                var nonTweenType = cmdParam[3];\n                var per = m.curTime / m.time;\n                for (var i = 0; i < m.attrInfos.length; i++) {\n                    var attrInfo = m.attrInfos[i];\n                    if (!attrInfo.needTween) {\n                        if ((nonTweenType == 0 && m.curTime == 1) || (nonTweenType == 1 && per == 1)) {\n                            attrInfo.uiComp[attrInfo.attName] = attrInfo.newValue;\n                        }\n                    }\n                    else {\n                        var valuePer = GameUtils.getValueByTransData(m.transData, per);\n                        attrInfo.uiComp[attrInfo.attName] = (attrInfo.newValue - attrInfo.oldValue) * valuePer + attrInfo.oldValue;\n                    }\n                }\n                m.curTime++;\n                if (per == 1) {\n                    os.remove_ENTERFRAME(arguments.callee, _this);\n                }\n            }, this, [passageData.displayObject, cmdParams, cmdParam]);\n            f.apply(this, [passageData.displayObject, cmdParams, cmdParam]);\n            passageData.onChangeAttrFrame.push(f);\n            var lastOnCoverPassage = passageData.onCoverPassage;\n            passageData.onCoverPassage = function () {\n                os.remove_ENTERFRAME(f, this);\n                lastOnCoverPassage.apply(this, arguments);\n            };\n        }\n    }\n    else {\n        if (!passageData) {\n            passageData = imageLayerPassageData[passageID] = {};\n            passageData.passageID = passageID;\n            passageData.type = passageType;\n            passageData.cmd = cmd;\n            passageData.lastStandAvatarCmdParams = cmdParams;\n            passageData.uiID = uiID;\n            passageData.dpX = 0;\n            passageData.dpY = 0;\n            passageData.dpZ = 100;\n            passageData.dpScaleX = 1;\n            passageData.dpScaleY = 1;\n            passageData.rotation = 0;\n            passageData.opacity = 1;\n            passageData.showType = 0;\n        }\n        passageData.changeUIAttrMode = true;\n        if (passageData.changeUIAttrs == null)\n            passageData.changeUIAttrs = [];\n        passageData.changeUIAttrs.push(cmdParams.changeUIAttr);\n    }\n}\nfunction onCommandAttributeBeforeChange(cmd, cmdParams, varName) {\n    previewWin.clearData();\n}\nfunction onCommandAttributeChange(cmd, cmdParams, varName, newValue) {\n    previewWin.setData(false);\n}\nfunction imageLayerOnToolsChangePostion(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeSize(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeRotation(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeStart(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeEnd(realSelObjs) {\n}\nfunction imageLayerOnToolsSelectObject(realSelObjs) {\n}\nfunction imageLayerPassageClear(passageID, passageData) {\n    if (passageData.type == passageType) {\n        if (passageData.onChangeAttrFrame) {\n            for (var i = 0; i < passageData.onChangeAttrFrame.length; i++) {\n                var f = passageData.onChangeAttrFrame[i];\n                os.remove_ENTERFRAME(f, this);\n            }\n        }\n        var a = passageData.displayObject;\n        if (a) {\n            a.dispose();\n        }\n    }\n}\nfunction imageLayerPassageStart(passageID, passageData) {\n    if (passageData.type == passageType && passageData.changeUIAttrMode) {\n        if (!passageData.displayObject) {\n            var showUIID = passageData.uiID;\n            var a = GameUI.load(showUIID, true);\n            if (!a) {\n                return;\n            }\n            previewWin.operateObjectTool.addExcludeOperactionObject(a);\n        passageData.onCoverPassage = imageLayerPassageClear;// v0.985 upgrader\n\n            a.mouseEnabled = false;\n            a.data = passageData;\n            passageData.displayObject = a;\n            uiLayer.addChild(a);\n            a.width = Config.WINDOW_WIDTH;\n            a.height = Config.WINDOW_HEIGHT;\n            a.dpDisplayPriority = passageData.dpDisplayPriority;\n            a.x = passageData.dpX;\n            a.y = passageData.dpY;\n            a.scaleX = passageData.dpScaleX;\n            a.scaleY = passageData.dpScaleY;\n            a.width = Config.WINDOW_WIDTH;\n            a.height = Config.WINDOW_HEIGHT;\n            a.rotation = passageData.rotation;\n            a.opacity = passageData.opacity;\n            if (previewWin.currentSelectCmd == passageData.cmd) {\n            }\n            else if (!previewWin.allowAllDisplayObject) {\n                a.mouseEnabled = false;\n                a.setTonal(-200, -200, -200, 0);\n            }\n        }\n        else {\n            passageData.displayObject.mouseEnabled = previewWin.allowAllDisplayObject;\n            passageData.displayObject.setTonal(0, 0, 0, 0);\n        }\n        for (var i = 0; i < passageData.changeUIAttrs.length; i++) {\n            var changeUIAttr = passageData.changeUIAttrs[i];\n            var atts = changeUIAttr[1][2];\n            if (atts) {\n                var comps = GameUI.getAllCompChildren(passageData.displayObject, true);\n                for (var compID in atts.atts) {\n                    var uiComp = comps.keyValue[compID];\n                    if (uiComp) {\n                        var attsValues = atts.atts[compID][1];\n                        for (var attName in attsValues) {\n                            var attValue = attsValues[attName];\n                            uiComp[attName] = attValue;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "compAutoOrder": false,
    "name": "移动界面内的元件"
}
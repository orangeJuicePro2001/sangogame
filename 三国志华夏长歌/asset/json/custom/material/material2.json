{
    "compAutoOrderLimitHeight": 0,
    "id": 2,
    "blockList": [
        {
            "name": "未命名块",
            "blockAttrs": [
                {
                    "attr": {
                        "id": "47731136556_0.7744923850502541",
                        "varName": "hue",
                        "varType": 0,
                        "compData": {
                            "compType": 1,
                            "compParam": {
                                "lowerLimit": 0,
                                "upperLimit": 1000,
                                "stepValue": 0.01,
                                "limitInteger": true,
                                "lockTextLimit": true,
                                "xDragEnabled": true,
                                "yDragEnabled": true,
                                "minLimit": -180,
                                "maxLimit": 180,
                                "tickValue": 1
                            }
                        },
                        "defaultValue": "0",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "色相",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": false,
                        "titleWidth": 50,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [],
                    "y": 10,
                    "x": 15,
                    "width": 200,
                    "height": 32
                }
            ],
            "blockCondition": [],
            "blockHeight": 50,
            "autoOrder": true
        }
    ],
    "customShader": "//======================================================================================================\n// SYSTEM START 该段注释由系统自动生成，请勿删改\n//======================================================================================================\n//------------------------------------------------------------------------------------------------------\n// 固定参数\n//------------------------------------------------------------------------------------------------------\n// varying vec2 v_texcoord; //  原始贴图UV坐标\n// uniform sampler2D texture; // 原始贴图\n// uniform float alpha; // 当前对象实际渲染的透明度\n//------------------------------------------------------------------------------------------------------\n// 该材质的自定义参数 判定该变量存在的宏：MU材质编号_变量名称\n//------------------------------------------------------------------------------------------------------\n// uniform float mu2_hue; // MU2_hue 色相\n//------------------------------------------------------------------------------------------------------\n// shader 代码规则：\n// 1.由于多材质合并shader代码运行，函数名必须以mf${材质ID}_开头以避免函数名称冲突，如 mf2_myFunc\n// 2.入口函数vec4 mf${材质ID}_main 如 vec4 mf2_main(){return gl_FragColor;}\n// 3.原图采样坐标获取：vec2 texCoord = getInRangeTextureCoord(v_texcoord);\n// 4.原图采样：vec4 color = getTextureColor(texCoord);\n// 5.关于自定义贴图的坐标信息：自定义贴图可能是图集中的一部分，提供了相关信息（mu材质编号_变量名_UVInfo）\n//   相对于0~1的坐标系提供了图集的映射信息 vec4 [UV宽度缩放比例, UV高度缩放比例, UV水平偏移量, UV垂直偏移量]\n// 6.变量宏（可用于判定该变量是否满足出现条件）：#ifdef MU材质编号_变量名称、#else、#endif\n// 7.系统宏 IN_GC_EDITOR=是否在编辑器中运行\n// 8.语法：C语言 更多资料请参考GLSL Shader\n//======================================================================================================\n// SYSTEM END\n//======================================================================================================\nuniform mat4 hueColorMat4;\nuniform vec4 hueAlphaVec4;\nvec4 mf2_main(){\n   gl_FragColor *= hueColorMat4;\n   gl_FragColor += hueAlphaVec4*gl_FragColor.a;\n   return gl_FragColor;\n}",
    "customPreShaderClacTS": "//------------------------------------------------------------------------------------------------------\n// 此处可以编写需要经过客户端代码预先计算再传递的额外Shader uniform（通常情况下是逐帧调用该段代码）\n// 可视化制作的自定义变量会自动进行转化为Shader中可用的uniform，此处是用于修改或新增计算后的参数进行传递\n// -- sp 可获取使用该材质的显示对象（GameSprite）\n// -- shader 可获得或修改即将传递给Shader使用的对应变量的值（类型要保持不变），比如 shader.mu3_xxx\n// -- 新增加属性：\n//    1.直接在此处编写：shader[\"mu材质编号_自定义变量名称\"] 如 shader[\"mu3_abc\"] = 5;\n//    2.在Shader代码中需要自己输入增加的，如 uniform float mu3_abc;\n// -- 如果需要缓存计算结果可以自行根据键值对进行缓存，以便减少计算量来提升性能 如 this[\"xxxx\"] = 计算后的结果;\n// 【Typescript 与 GLSL 中变量映射】\n// -- number             => uniform float\n// -- number[]           => uniform vec2/vec3/vec4  根据ts中数值数组的长度决定\n// -- Float32Array(16)   => uniform mat4  按顺序对应4x4矩阵数据\n//------------------------------------------------------------------------------------------------------\nvar hueUniformName = \"hueColorMat4\";\nvar hueAlphaName = \"hueAlphaVec4\";\nvar cacheKey = \"__hueValue\";\nvar huaValue = this[cacheKey];\nif (!huaValue || huaValue[0] != shader.mu2_hue) {\n    var hueColorMat4 = shader[hueUniformName] = new Float32Array(16);\n    var hueAlphaVec4 = shader[hueAlphaName] = new Float32Array(4);\n    var hueF = new HueFilter(shader.mu2_hue);\n    var colorMat = hueF.colorMat;\n    var j = 0;\n    var z = 0;\n    for (var i = 0; i < 20; i++) {\n        if (i % 5 != 4) {\n            hueColorMat4[j++] = colorMat[i];\n        } else {\n            hueAlphaVec4[z++] = colorMat[i];\n        }\n    }\n    this[cacheKey] = [shader.mu2_hue, hueColorMat4, hueAlphaVec4];\n}\nelse {\n    shader[hueUniformName] = huaValue[1];\n    shader[hueAlphaName] = huaValue[2];\n}",
    "customPreShaderClacJS": "var hueUniformName = \"hueColorMat4\";\nvar hueAlphaName = \"hueAlphaVec4\";\nvar cacheKey = \"__hueValue\";\nvar huaValue = this[cacheKey];\nif (!huaValue || huaValue[0] != shader.mu2_hue) {\n    var hueColorMat4 = shader[hueUniformName] = new Float32Array(16);\n    var hueAlphaVec4 = shader[hueAlphaName] = new Float32Array(4);\n    var hueF = new HueFilter(shader.mu2_hue);\n    var colorMat = hueF.colorMat;\n    var j = 0;\n    var z = 0;\n    for (var i = 0; i < 20; i++) {\n        if (i % 5 != 4) {\n            hueColorMat4[j++] = colorMat[i];\n        }\n        else {\n            hueAlphaVec4[z++] = colorMat[i];\n        }\n    }\n    this[cacheKey] = [shader.mu2_hue, hueColorMat4, hueAlphaVec4];\n}\nelse {\n    shader[hueUniformName] = huaValue[1];\n    shader[hueAlphaName] = huaValue[2];\n}\n",
    "name": "色相",
    "shaderSize": false
}